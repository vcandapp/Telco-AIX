[
  {
    "input": "Generate network configuration for mapped nics. ovs_bond under ovs_bridge, nic1, nic2 as bond member",
    "output": "# Example showing use of the optional nicN abstraction\n# for device naming, which defaults to an ordered\n# translation to biodev names based on which interfaces\n# are active on the system.\n# Optionally the default mapping may be overridden by\n# a mapping file via the -m option.\nnetwork_config:\n  -\n     type: ovs_bridge\n     name: br-ctlplane\n     use_dhcp: true\n     members:\n       -\n         type: ovs_bond\n         name: bond1\n         use_dhcp: true\n         members:\n           -\n             type: interface\n             name: nic1\n           -\n             type: interface\n             name: nic2"
  },
  {
    "input": "Generate network configuration for nics em1 and em2. ovs_bond under ovs_bridge,  two nics as bond member",
    "output": "network_config:\n  -\n     type: ovs_bridge\n     name: br-ctlplane\n     use_dhcp: true\n     members:\n       -\n         type: ovs_bond\n         name: bond1\n         use_dhcp: true\n         members:\n           -\n             type: interface\n             name: em1\n           -\n             type: interface\n             name: em2"
  },
  {
    "input": "Generate network configuration for single nic em1. ovs_bridge, dhcp set and single nic member",
    "output": "network_config:\n  -\n    type: ovs_bridge\n    name: br-ctlplane\n    use_dhcp: true\n    ovs_extra:\n      - br-set-external-id br-ctlplane bridge-id br-ctlplane\n    members:\n      -\n        type: interface\n        name: em1"
  },
  {
    "input": "Generate network configuration for single nic em1. ovs_bridge, dhcp set, ovs_fail_mode as secure and single nic member",
    "output": "network_config:\n  -\n    type: ovs_bridge\n    name: br-ctlplane\n    use_dhcp: true\n    ovs_fail_mode: secure\n    members:\n      -\n        type: interface\n        name: em1"
  },
  {
    "input": "Generate network configuration for single nic em1. ovs_bridge, ovs_extra and single nic member",
    "output": "network_config:\n  -\n    type: ovs_bridge\n    name: br-ctlplane\n    use_dhcp: true\n    ovs_extra:\n      - br-set-external-id br-ctlplane bridge-id br-ctlplane\n      - set bridge {name} stp_enable=true\n    members:\n      -\n        type: interface\n        name: em1"
  },
  {
    "input": "Generate network configuration for single nic em1. ovs_bridge, ovs_extra. single nic and vlan as members",
    "output": "network_config:\n  -\n    type: ovs_bridge\n    name: br-ctlplane\n    use_dhcp: true\n    members:\n      -\n        type: interface\n        name: em1\n      -\n        type: vlan\n        vlan_id: 16\n        ovs_options: \"mac=00:11:22:33:44:55\"\n        ovs_extra:\n          - \"foo=bar\"\n        addresses:\n          -\n            ip_netmask: 192.0.2.1/24\n    routes:\n      -\n        next_hop: 192.0.2.1\n        ip_netmask: 192.0.2.1/24"
  },
  {
    "input": "Generate network configuration for contrail_vrouter, two nics em3, em1. dpdk bond mode",
    "output": "network_config:\n  -\n    type: contrail_vrouter_dpdk\n    name: vhost0\n    members:\n      -\n        type: interface\n        name: em3\n      -\n        type: interface\n        name: em1\n    mtu: 1500\n    bond_mode: 2\n    bond_policy: 802.3ad"
  },
  {
    "input": "Generate network configuration for contrail_vrouter, dpdk, vfio driver and single member em3",
    "output": "network_config:\n  -\n    type: contrail_vrouter_dpdk\n    name: vhost0\n    members:\n      -\n        type: interface\n        name: em3\n    mtu: 1500\n    driver: vfio #default driver is uio_pci_generic"
  },
  {
    "input": "Generate network configuration for contrail_vrouter, vlan member and nic em3",
    "input": "Generate network configuration for contrail_vrouter_vlan",
    "output": "network_config:\n  -\n    type: contrail_vrouter\n    name: vhost0\n    members:\n      -\n        type: vlan\n        vlan_id: 100\n        device: em3\n    mtu: 1500"
  },
  {
    "input": "Generate network configuration for contrail_vrouter, single member em3",
    "output": "network_config:\n  -\n    type: contrail_vrouter\n    name: vhost0\n    members:\n      -\n        type: interface\n        name: em3\n    mtu: 1500"
  },
  {
    "input": "Generate basic network configuration for dcb_day2_sample, dscp2prio",
    "output": "# For reconfiguring the DCB in day 2 operations, the below\n# template could be used.\n# use ``os-net-config-dcb -c <config.yaml> `` to perform the\n# reconfiguration.\n\ndcb_config:\n  -\n    type: dcb_config\n    # NIC numbering is not supported here\n    device: ens1f0np0\n    dscp2prio:\n        # Add the dscp configs.\n        # It requires priority and protocol\n        - priority: 5\n          protocol: 45\n        - priority: 5\n          protocol: 46\n        - priority: 6\n          protocol: 47"
  },
  {
    "input": "Generate network configuration for dcb_sample",
    "output": "network_config:\n  -\n    type: sriov_pf\n    name: ens1f0np0\n    numvfs: 4\n    use_dhcp: false\n    dcb:\n      dscp2prio:\n        # Add the dscp configs.\n        # It requires priority and protocol\n        - priority: 5\n          protocol: 45\n        - priority: 5\n          protocol: 46\n        - priority: 6\n          protocol: 47\n  -\n    type: sriov_pf\n    name: ens1f1np1\n    numvfs: 4\n    use_dhcp: false\n    dcb:\n      # Remove the dscp configurations\n      dscp2prio: []"
  },
  {
    "input": "Generate network configuration for ib_child_interface",
    "output": "network_config:\n  # Note(abdallahyas): a parent InfiniBand interface is needed to be up for\n  # the IPoIB pkey interface to work. The ib0 interface here is just there\n  # to make sure that it is up, it can be configured separately.\n\n  -\n    type: ib_interface\n    name: ib0\n    use_dhcp: false\n\n  -\n    type: ib_child_interface\n    parent: ib0\n    pkey_id: 100\n    use_dhcp: false\n    addresses:\n      -\n        ip_netmask: 10.20.30.40/24"
  },
  {
    "input": "Generate network configuration for ib_interface",
    "output": "network_config:\n  -\n    type: ib_interface\n    name: ib0\n    use_dhcp: false\n    addresses:\n    -\n      ip_netmask: 192.0.2.1/24\n    routes:\n      -\n        ip_netmask: 0.0.0.0/0\n        next_hop: 192.0.2.254\n        default: true\n  -\n    type: interface\n    name: ib1\n    use_dhcp: true\n    defroute: false"
  },
  {
    "input": "Generate network configuration for interface, 2 nics em1, em2, em3",
    "output": "network_config:\n  -\n    type: interface\n    name: em1\n    use_dhcp: false\n    use_dhcpv6: false\n    addresses:\n    -\n      ip_netmask: 192.0.2.1/24\n    routes:\n      -\n        ip_netmask: 0.0.0.0/0\n        next_hop: 192.0.2.254\n        default: true\n      -\n        ip_netmask: 10.1.2.0/24\n        next_hop: 192.0.2.5\n        route_options: \"metric 10\"\n  -\n    type: interface\n    name: em2\n    use_dhcp: true\n    defroute: false\n    ethtool_opts: \"speed 1000 duplex full\"\n  -\n    type: interface\n    name: em3\n    use_dhcp: true\n    hotplug: true\n    onboot: false # if not set default is true"
  },
  {
    "input": "Generate network configuration for ivs",
    "output": "network_config:\n  -\n    type: ivs_bridge\n    members:\n      -\n        type: interface\n        name: nic2\n      -\n        type: interface\n        name: nic3\n      -\n        type: ivs_interface\n        name: api\n        vlan_id: 201\n        addresses:\n          -\n            ip_netmask: 172.16.2.7/24\n      -\n        type: ivs_interface\n        name: storage\n        vlan_id: 202\n        addresses:\n          -\n            ip_netmask: 172.16.1.6/24"
  },
  {
    "input": "Generate network configuration for linux_bond_networkmanager",
    "output": "# To use NetworkManager to manage an interface, set nm_controlled=true.\n# Note that some interface types may not be supported by NetworkManager.\nnetwork_config:\n  -\n    type: linux_bond\n    name: bond1\n    nm_controlled: true\n    use_dhcp: true\n    bonding_options: \"mode=active-backup\"\n    members:\n      -\n        type: interface\n        name: em1\n        nm_controlled: true\n      -\n        type: interface\n        name: em2\n        nm_controlled: true"
  },
  {
    "input": "Generate network configuration for linux_bond, with two members em1, em2. bonding_option = active-backip",
    "output": "nnetwork_config:\n  -\n    type: linux_bond\n    name: bond1\n    use_dhcp: true\n    bonding_options: \"mode=active-backup fail_over_mac=2 primary=em2\"\n    members:\n      -\n        type: interface\n        name: em1\n      -\n        type: interface\n        name: em2"
  },
  {
    "input": "Generate network configuration for linux_bridge, single member em1",
    "output": "network_config:\n  -\n    type: linux_bridge\n    name: br-ctlplane\n    use_dhcp: true\n    members:\n      -\n        type: interface\n        name: em1"
  },
  {
    "input": "Generate network configuration for linux_tap",
    "output": "network_config:\n  -\n    type: linux_tap\n    name: tap0\n    use_dhcp: true"
  },
  {
    "input": "Generate network configuration for mapping_mnemonic",
    "output": "# See the mapping.yaml sample for an overview of the mapping functionality.\n# This shows the use of mnemonic aliases instead of the default nicN aliases\n# in configs. It can be used with the -m option to override the default\n# mapping of the nicN aliases.\ninterface_mapping:\n    provision: em1\n    bond0p1: em2\n    bond0p2: 12:34:56:de:f0:12"
  },
  {
    "input": "Generate network configuration for mapping_report",
    "output": "interface_mapping:\n    nic1: em1\n    nic2: em2\n    nic3: em4\n    nic4: em3"
  },
  {
    "input": "Generate network configuration for mapping",
    "output": "# This can be used with the -m option to override the\n# default mapping of the nicN aliases in configs\n# The mapping can specify either a device name or a mac address\n# If --persist-mapping is specified, we write the device aliases\n# config instead of the system names, e.g we actually configure\n# nic1 intead of em3.  This is probably best used with --cleanup\n# to remove the stale configs e.g for em3\ninterface_mapping:\n    nic1: em3\n    nic2: em1\n    nic3: 12:34:56:de:f0:12\n    nic4: 12:34:56:78:9a:bc"
  },
  {
    "input": "Generate network configuration for nfvswitch",
    "output": "network_config:\n  -\n    type: nfvswitch_bridge\n    options: \"-c 2,3,4,5\"\n    members:\n      -\n        type: interface\n        name: nic2\n      -\n        type: interface\n        name: nic3\n      -\n        type: nfvswitch_internal\n        name: api\n        vlan_id: 201\n        addresses:\n          -\n            ip_netmask: 172.16.2.7/24\n      -\n        type: nfvswitch_internal\n        name: storage\n        vlan_id: 202\n        addresses:\n          -\n            ip_netmask: 172.16.1.6/24"
  },
  {
    "input": "Generate network configuration for ovs_dpdk_bond under ovs_user_bridge. bond members are dpdk0-nic2, dpdk1-nic3",
    "output": "network_config:\n  -\n    type: ovs_user_bridge\n    name: br-link\n    members:\n      -\n        type: ovs_dpdk_bond\n        name: dpdkbond0\n     mtu: 9000\n        # rx_queue is optional, used for multi-queue option. It configures the\n        # maximum number of queues for each interface associated with the\n        # ovs_dpdk_bond. If not defined, the physical interfaces will have\n        # single queue.\n        # (rx_queue) x (Number of members in the ovs_dpdk_bond) should be less\n        # than the number of PMD cores, as each queue will have one PMD thread\n        # (CPU) associated with it.\n        rx_queue: 4\n        members:\n            -\n              type: ovs_dpdk_port\n              name: dpdk0\n              members:\n                  -\n                    type: interface\n                    name: nic2\n            -\n              type: ovs_dpdk_port\n              name: dpdk1\n              members:\n                  -\n                    type: interface\n                    name: nic3"
  },
  {
    "input": "Generate network configuration for ovs_user_bridge. member as dpdk0-nic2",
    "output": "# ovs_user_bridge type refers to the OVSUserBridge OVS ifup type, which will\n# have the datapath type set as 'netdev' for DPDK processing.\n# ovs_dpdk_port type refers to the OVSDPDKPort OVS ifup type, which will\n# add the port to the bridge with the interface type as 'dpdk'.\n# The 'ovs_internal' parameter defaults to true but if set to false there\n# will not be a connection between the bridge and the kernel. Currently this\n# is only supported in the ifcfg provider which will set LINKSTATUS=down.\n\nnetwork_config:\n  -\n    type: ovs_user_bridge\n    name: br-link\n    ovs_internal: false\n    # Do not create a connection between the bridge and the kernel. When using\n    # the ifcfg provider setting this to false will add LINKSTATUS=down to the\n    # ifcfg file, which will result in the internal interface being down and\n    # no traffic will flow between the bridge and the kernel. It is not possible\n    # to add an IP address to the internal interface and this will not work with\n    # tun interfaces which are routed by the kernel.\n    members:\n      -\n        type: ovs_dpdk_port\n        # dpdk0 name is generated by dpdk drivers after dpdk_nic_bind\n        name: dpdk0\n        # driver is optional argument, default driver is 'vfio-pci'\n        driver: igb_uio\n        # MTU is optional, used for jumbo frames\n        mtu: 8192\n        # rx_queue is optional, used for multi-queue option. It configures the\n        # maximum number of queues for a physical interface. If not defined,\n        # the physical interface will have single queue. The number of queues\n        # should be less than the PMD cores as each queue will have one PMD\n        # thread (CPU) associated with it.\n        rx_queue: 4\n        # rx_queue_size and tx_queue_size are optional. It configures the\n        # number of rx/tx descriptors that the associated NIC will be\n        # initialized with.\n        rx_queue_size: 1024\n        tx_queue_size: 2048\n        members:\n            - type: interface\n              name: nic2"
  },
  {
    "input": "Generate network configuration for ovs_user_bridge. member as dpdk0-nic2",
    "output": "# ovs_user_bridge type refers to the OVSUserBridge OVS ifup type, which will\n# have the datapath type set as 'netdev' for DPDK processing.\n# ovs_dpdk_port type refers to the OVSDPDKPort OVS ifup type, which will\n# add the port to the bridge with the interface type as 'dpdk'.\n\nnetwork_config:\n  -\n    type: ovs_user_bridge\n    name: br-link\n    members:\n      -\n        type: ovs_dpdk_port\n        # dpdk0 name is generated by dpdk drivers after dpdk_nic_bind\n        name: dpdk0\n        # driver is optional argument, default driver is 'vfio-pci'\n        driver: igb_uio\n        # MTU is optional, used for jumbo frames\n        mtu: 8192\n        # rx_queue is optional, used for multi-queue option. It configures the\n        # maximum number of queues for a physical interface. If not defined,\n        # the physical interface will have single queue. The number of queues\n        # should be less than the PMD cores as each queue will have one PMD\n        # thread (CPU) associated with it.\n        rx_queue: 4\n        # rx_queue_size and tx_queue_size are optional. It configures the\n        # number of rx/tx descriptors that the associated NIC will be\n        # initialized with.\n        rx_queue_size: 1024\n        tx_queue_size: 2048\n        members:\n            - type: interface\n              name: nic2"
  },
  {
    "input": "Generate network configuration for ovs_bridge with member as eth1, ovs_patch_ports",
    "output": "network_config:\n  -\n    type: ovs_bridge\n    name: br-ctlplane\n    mtu: 1500\n    members:\n      -\n        type: interface\n        name: eth1\n        # force the MAC address of the bridge to this interface\n        primary: true\n        mtu: 1500\n    ovs_extra: [\"br-set-external-id br-ctlplane bridge-id br-ctlplane\"]\n  -\n    type: ovs_patch_port\n    name: br_pub-patch\n    bridge_name: br-ctlplane\n    peer: br-ctlplane-patch\n  -\n    type: ovs_patch_port\n    name: br-ctlplane-patch\n    bridge_name: br_pub\n    peer: br_pub-patch"
  },
  {
    "input": "Generate network configuration for routes",
    "output": "network_config:\n  -\n    type: route_table\n    name: custom\n    table_id: 200\n  -\n    type: route_table\n    name: alternate\n    table_id: 201\n  -\n    type: interface\n    name: em1\n    use_dhcp: false\n    addresses:\n    -\n      ip_netmask: 192.0.2.1/24\n    routes:\n      -\n        ip_netmask: 10.1.3.0/24\n        next_hop: 192.0.2.5\n        route_options: \"metric 10\"\n        table: 200  # Use table ID or table name\n      -\n        ip_netmask: 0.0.0.0/0\n        next_hop: 192.0.2.254\n        default: true\n        table: 200\n    rules:\n      - rule: \"iif em1 table 200\"\n        comment: \"Route incoming traffic to em1 with table 200\"\n      - rule: \"from 192.0.2.0/24 table 200\"\n        comment: \"Route all traffic from 192.0.2.0/24 with table 200\"\n      - rule: \"add blackhole from 172.19.40.0/24 table 200\"\n      - rule: \"add unreachable iif em1 from 192.168.1.0/24\"\n  -\n    type: interface\n    name: em2\n    use_dhcp: false\n    addresses:\n      - ip_netmask: 10.0.2.1/24\n    routes:\n      -\n        ip_netmask: 10.1.3.0/24\n        next_hop: 10.0.2.253\n        table: alternate  # Use table ID or table name\n      -\n        default: true\n        next_hop: 10.0.3.254\n        route_options: \"table alternate\"\n    rules:\n      - rule: \"iif em2 table alternate\"\n      - rule: \"from 10.0.2.0/24 table alternate\""
  },
  {
    "input": "Generate network configuration for sriov_dpdk_nicpartition. pf p1p2, p2p2 with numvf 10. ovs_user_bridge with members vf 1",
    "output": "network_config:\n  # sriov_pf type shall be used to configure the PF's of NICs.\n  # The numvfs configured for the PF's shall be set on the sriov_numvfs of the\n  # sysfs for the corresponding NIC and the persistence of the same across reboots\n  # shall be handled\n  -\n    type: sriov_pf\n    # nic name or nic number of the NIC that needs to be configured for SRIOV\n    name: p2p1\n    # number of VFs required on the particular NIC\n    numvfs: 10\n    # Dont set the IP address on the PF\n    use_dhcp: false\n    # Allow all the traffic received. It might be needed when one of its VF\n    # is attached to a ovs bridge. Default: true\n    promisc: true\n  -\n    type: sriov_pf\n    name: p2p2\n    numvfs: 10\n    use_dhcp: false\n    promisc: true\n  # sriov_vf type shall be used to configure the VF's of NICs.\n  # It requires the PF devices to be configured via sriov_pf types\n  # \"name\" parameter is not required for VF's. It'll be derived from the VF id\n  # and the PF device name.\n  - type: sriov_vf\n    # The PF device needs to be configured via the sriov_pf type\n    # the PF device could be a nic number (ex: nic5) or nic name (ex: ens20f0)\n    device: p2p1\n    # The VF id shall be the VF number between 0 to (numvfs-1), where numvfs\n    # is the member of the sriov_pf type\n    vfid: 5\n    addresses:\n    - ip_netmask: 192.0.2.1/24\n    # When specified, all traffic sent from the VF will be tagged with the\n    # specified VLAN ID. Incoming traffic will be filtered for the specified\n    # VLAN ID, and will have all VLAN tags stripped before being passed to the\n    # VF. Setting this parameter to 0 disables VLAN tagging and filtering.\n    vlan_id: 100\n    # VLAN-Quality Of Service (priority) bits for the VLAN tag.\n    # When specified, all VLAN tags transmitted by the VF will include the\n    # specified priority bits in the VLAN tag. Requires vlan_id\n    # Default value is 0.\n    qos: 2\n    # MAC spoofing is a method of altering the MAC address\n    # The MAC address anti-spoofing when enabled protects from malicious MAC\n    # address spoofing. It should be disabled for 802.3ad bonds.\n    spoofcheck: true\n    # Change the MAC address of the VF.\n    macaddr: 00:78:90:80:cc:30\n    # Enabling trust (true) for VF allows enabling multicast/promiscuous mode\n    # on the VF. The default value is false.\n    trust: true\n    # Link state seen by the VF\n    # - auto: a reflection of the PF link state (default)\n    # - enable: lets the VF to communicate with other VFs on this host even\n    #           if the PF link state is down\n    # - disable: causes the HW to drop any packets sent by the VF.\n    state: auto\n    # Enabling promisc mode allows the traffic originally targeted to go to the\n    # VF and it will also receive the unmatched traffic and all the multicast\n    # traffic received in the physical port. Note that all traffic that has\n    # destination mac that does not match any of the VFs/PF MAC addresses is\n    # referred to as unmatched traffic.\n    # The default value is false. Requires the enabling of trust mode\n    promisc: false\n  # Attach a SR-IOV VF to a ovs user bridge\n  - type: ovs_user_bridge\n    name: br-vfs\n    use_dhcp: false\n    members:\n    - type: ovs_dpdk_port\n      name: dpdk0\n      members:\n      # Specify the type\n      - type: sriov_vf\n        # Required field\n        device: p5p2\n        # Required field\n        vfid: 1\n        # Optional field\n        vlan_id: 116\n        # Optional field, but requires vlan_id\n        qos: 3\n        # Set trust to true when attaching to ovs_user_bridge\n        trust: true\n        # Set spoofcheck to false when attaching to ovs_user_bridge\n        spoofcheck: false\n        # Note: Do not set promisc mode.\n  -\n    type: ovs_user_bridge\n    name: br-bond\n    members:\n      -\n        type: ovs_dpdk_bond\n        name: dpdkbond1\n        ovs_options: \"bond_mode=active-backup\"\n        members:\n            -\n              type: ovs_dpdk_port\n              name: dpdk2\n              members:\n                  -\n                    type: sriov_vf\n                    device: p2p1\n                    vfid: 4\n                    vlan_id: 114\n                    qos: 6\n                    # Default/Recommended : false\n                    spoofcheck: false\n                    # Default/Recommended : true\n                    trust: true\n                    primary: true\n                    # Note: DO NOT SET promisc mode\n            -\n              type: ovs_dpdk_port\n              name: dpdk3\n              members:\n                  -\n                    type: sriov_vf\n                    device: p2p2\n                    vfid: 4\n                    vlan_id: 114\n                    qos: 6\n                    spoofcheck: false\n                    trust: true"
  },
  {
    "input": "Generate network configuration for sriov_pf_switchdev",
    "output": "network_config:\n  # sriov_pf type shall be used to configure the PF's of NICs.\n  # The numvfs configured for the PF's shall be set on the sriov_numvfs of the\n  # sysfs for the corresponding NIC and the persistence of the same across reboots\n  # shall be handled.\n  # The link_mode configured the mode of the sriov_pf which can be \"switchdev\"\n  # or legacy.\n  # In case fo switchdev, you will enable the hardware offloading and VF-LAG\n  # capabilities\n  # For now, if you configured link_mode with \"switchdev\" you will not be able\n  # to use any of its sriov_vfs, the vfs will be only used for vms.\n  -\n    type: sriov_pf\n    # nic name or nic number of the NIC that needs to be configured for SRIOV\n    name: p2p1\n    # number of VFs required on the particular NIC\n    numvfs: 10\n    addresses:\n    - ip_netmask: 192.0.2.1/24\n    # Allow all the traffic received. Default: true\n    promisc: true\n    # The mode of sriov_pf which:\n    # - switchdev\n    # - legacy (default)\n    link_mode: switchdev\n    # (Optional) The flow steering mode, which could be smfs or dmfs\n    # If it's not set (None), the default will be smfs\n    steering_mode: dmfs\n\n  -\n    type: ovs_bridge\n    name: br-pfs\n    use_dhcp: true\n    members:\n    -\n      type: sriov_pf\n      name: p2p2\n      numvfs: 10\n      promisc: true\n      use_dhcp: false\n      link_mode: switchdev\n\n  -\n    type: ovs_bridge\n    name: br-bond\n    use_dhcp: true\n    members:\n    -\n      type: ovs_bond\n      name: bond_pf\n      ovs_options: \"bond_mode=active-backup\"\n      members:\n      -\n        type: sriov_pf\n        name: p5p1\n        numvfs: 10\n        primary: true\n        promisc: true\n        use_dhcp: false\n        link_mode: switchdev\n      -\n        type: sriov_pf\n        name: p5p2\n        numvfs: 10\n        promisc: true\n        use_dhcp: false\n        link_mode: switchdev\n\n  -\n    # VF-LAG capability, which means that the vfs will be bonded in hardware\n    type: linux_bond\n    name: bond_lnx\n    use_dhcp: true\n    bonding_options: \"mode=active-backup\"\n    members:\n    -\n      type: sriov_pf\n      name: p6p1\n      numvfs: 10\n      primary: true\n      promisc: true\n      use_dhcp: false\n      link_mode: switchdev\n    -\n      type: sriov_pf\n      name: p6p2\n      numvfs: 10\n      promisc: true\n      use_dhcp: false\n      link_mode: switchdev"
  },
  {
    "input": "Generate network configuration for sriov_pf, p1p2 and p2p2 - numvf 10",
    "output": "network_config:\n  # sriov_pf type shall be used to configure the PF's of NICs.\n  # The numvfs configured for the PF's shall be set on the sriov_numvfs of the\n  # sysfs for the corresponding NIC and the persistence of the same across reboots\n  # shall be handled\n  -\n    type: sriov_pf\n    # nic name or nic number of the NIC that needs to be configured for SRIOV\n    name: p2p1\n    # number of VFs required on the particular NIC\n    numvfs: 10\n    # Bind the created VFs to their default network driver\n    # When configuring a large number of VFs intended for VMs direct access,\n    # setting drivers_autoprobe=false will reduce the amount of IRQ and Netlink\n    # churn on the host.\n    drivers_autoprobe: true\n    # Dont set the IP address on the PF\n    use_dhcp: false\n    # Allow all the traffic received. It might be needed when one of its VF\n    # is attached to a ovs bridge. Default: true\n    promisc: true\n    # Set ethtool options (optional)\n    ethtool_opts: \"speed 1000 duplex full\"\n\n  -\n    type: sriov_pf\n    name: p2p2\n    numvfs: 10\n    drivers_autoprobe: true\n    use_dhcp: false\n    promisc: true\n  # sriov_vf type shall be used to configure the VF's of NICs.\n  # It requires the PF devices to be configured via sriov_pf types\n  # \"name\" parameter is not required for VF's. It'll be derived from the VF id\n  # and the PF device name.\n  - type: sriov_vf\n    # The PF device needs to be configured via the sriov_pf type\n    # the PF device could be a nic number (ex: nic5) or nic name (ex: ens20f0)\n    device: p2p1\n    # The VF id shall be the VF number between 0 to (numvfs-1), where numvfs\n    # is the member of the sriov_pf type\n    vfid: 5\n    addresses:\n    - ip_netmask: 192.0.2.1/24\n    # When specified, all traffic sent from the VF will be tagged with the\n    # specified VLAN ID. Incoming traffic will be filtered for the specified\n    # VLAN ID, and will have all VLAN tags stripped before being passed to the\n    # VF. Setting this parameter to 0 disables VLAN tagging and filtering.\n    vlan_id: 100\n    # VLAN-Quality Of Service (priority) bits for the VLAN tag.\n    # When specified, all VLAN tags transmitted by the VF will include the\n    # specified priority bits in the VLAN tag. Requires vlan_id\n    # Default value is 0.\n    qos: 2\n    # change the allowed minimum transmit bandwidth, in Mbps, for the specified VF.\n    # Minimum TXRATE should be always <= Maximum TXRATE.\n    # Setting this parameter to 0 disables rate limiting.\n    min_tx_rate: 10\n    # change the allowed maximum transmit bandwidth, in Mbps, for the specified VF.\n    # Setting this parameter to 0 disables rate limiting.\n    max_tx_rate: 100\n    # MAC spoofing is a method of altering the MAC address\n    # The MAC address anti-spoofing when enabled protects from malicious MAC\n    # address spoofing. It should be disabled for 802.3ad bonds.\n    spoofcheck: true\n    # Change the MAC address of the VF.\n    macaddr: 00:78:90:80:cc:30\n    # Enabling trust (true) for VF allows enabling multicast/promiscuous mode\n    # on the VF. The default value is false.\n    trust: true\n    # Link state seen by the VF\n    # - auto: a reflection of the PF link state (default)\n    # - enable: lets the VF to communicate with other VFs on this host even\n    #           if the PF link state is down\n    # - disable: causes the HW to drop any packets sent by the VF.\n    state: auto\n    # Enabling promisc mode allows the traffic originally targeted to go to the\n    # VF and it will also receive the unmatched traffic and all the multicast\n    # traffic received in the physical port. Note that all traffic that has\n    # destination mac that does not match any of the VFs/PF MAC addresses is\n    # referred to as unmatched traffic.\n    # The default value is false. Requires the enabling of trust mode\n    promisc: false\n    # Set ethtool options (optional)\n    ethtool_opts: \"speed 1000 duplex full\"\n  # Attach a SR-IOV VF to a ovs bridge\n  - type: ovs_bridge\n    name: br-vfs\n    use_dhcp: true\n    members:\n    # Specify the type\n    - type: sriov_vf\n      # Required field\n      device: p2p1\n      # Required field\n      vfid: 1\n      # Optional field\n      vlan_id: 116\n      # Optional field, but requires vlan_id\n      qos: 3\n      # For OVS Bridge, the default value is true (recommended)\n      trust: true\n      # For OVS Bridge, the default value is true (recommended)\n      promisc: true\n      # For OVS Bridge, the default value is false (recommended)\n      spoofcheck: false\n  - type: ovs_bridge\n    name: br-bond\n    use_dhcp: true\n    members:\n    -\n      type: ovs_bond\n      name: bond_vf\n      ovs_options: \"bond_mode=active-backup\"\n      members:\n      -\n        type: sriov_vf\n        device: p2p1\n        vfid: 2\n        vlan_id: 112\n        qos: 4\n        primary: true\n        # For OVS Bond, the default value is true (recommended)\n        trust: true\n        # For OVS Bond, the default value is true (recommended)\n        promisc: true\n        # For OVS Bond, the default value is false (recommended)\n        spoofcheck: false\n      -\n        type: sriov_vf\n        device: p2p2\n        vfid: 2\n        vlan_id: 112\n        qos: 4\n        trust: true\n        promisc: true\n        spoofcheck: false\n  - type: linux_bond\n    name: bond_lnx\n    use_dhcp: true\n    bonding_options: \"mode=active-backup\"\n    members:\n    -\n      type: sriov_vf\n      device: p2p1\n      vfid: 3\n      vlan_id: 113\n      qos: 5\n      # For linux_bond, the default value is false\n      spoofcheck: false\n      # For linux_bond, the default value is true\n      trust: true\n      # For linux_bond, the default value is false\n      promisc: false\n      primary: true\n    -\n      type: sriov_vf\n      device: p2p2\n      vfid: 3\n      vlan_id: 113\n      qos: 5\n      spoofcheck: false\n      trust: true\n      promisc: false"
  },
  {
    "input": "Generate network configuration for team",
    "output": "# Config for bonding with teamd. Bonding options are provided as a JSON\n# string. The following runners are available in teamd: broadcast,\n# roundrobin, activebackup, loadbalance, and lacp.\n# Please see the teamd.conf(5) man page for more information.\nnetwork_config:\n  -\n    type: team\n    name: team1\n    use_dhcp: true\n    bonding_options: '{\"runner\": {\"name\": \"activebackup\"}}'\n    members:\n      -\n        type: interface\n        name: em1\n        primary: true\n      -\n        type: interface\n        name: em2"
  },
  {
    "input": "Generate network configuration for vdpa",
    "output": "network_config:\n  # Since vDPA can't function without OVS Hardware Offload, the PFs have to\n  # be a member of an ovs_bridge.\n  - type: ovs_bridge\n    name: br-vdpa\n    use_dhcp: true\n    members:\n    # sriov_pf type shall be used to configure the PF's of vDPA devices.\n    # The numvfs configured for the PF's shall be set on the sriov_numvfs of the\n    # sysfs for the corresponding NIC and the persistence of the same across reboots\n    # shall be handled\n    -\n      type: sriov_pf\n      # nic name or nic number of the NIC that needs to be configured for vDPA\n      name: p2p1\n      # Flag this PF as a vDPA device\n      vdpa: true\n      # multi queue size for vDPA device\n      vdpa_queues: 50\n      # number of VFs required on the particular NIC\n      # Should be at least one when vdpa is true\n      numvfs: 10\n      # Dont set the IP address on the PF\n      use_dhcp: false\n      # Link mode for the PF has to be switchdev when vdpa is true\n      link_mode: switchdev\n    -\n      type: sriov_pf\n      name: p2p2\n      vdpa: true\n      numvfs: 10\n      vdpa_queues: 50\n      use_dhcp: false\n      link_mode: switchdev"
  },
  {
    "input": "Generate network configuration for vpp_bond",
    "output": "network_config:\n  -\n    type: vpp_bond\n    # name must be in the format of eth_bondX or net_bondingX, where X is a\n    # unique number for each bond.\n    name: net_bonding0\n    addresses:\n      -\n        ip_netmask: 192.0.2.1/24\n    bonding_options: \"mode=2,xmit_policy=l34\"\n    members:\n      -\n        type: vpp_interface\n        name: eth1\n      -\n        type: vpp_interface\n        name: eth2"
  },
  {
    "input": "Generate network configuration for vpp_interface",
    "output": "network_config:\n  -\n    type: vpp_interface\n    name: nic2\n    addresses:\n      -\n        ip_netmask: 192.0.2.1/24\n    # DPDK poll-mode driver name. Defaults to 'vfio-pci', other possible value\n    # is 'uio_pci_generic'. It is also possible to specify other driver names\n    # such as 'igb_uio', however, it is assumed that any required kernel\n    # modules for those drivers are already loaded when os-net-config is\n    # invoked.\n    uio_driver: uio_pci_generic\n    # Interface options such as vlan stripping and tx/rx transmit queues\n    # specification. Reference for those configurations can\n    # be found at https://wiki.fd.io/view/VPP/Command-line_Arguments\n    # Example: 'vlan-strip-offload on num-rx-queues 3'\n    #options: \"vlan-strip-offload off\""
  }
]
